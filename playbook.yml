- name: "[Server setup] : Initial Debian based server setup"
  hosts: servers
  become: True
  tasks:
    # Update and upgrade system packages
    - name: "Update apt caches"
      ansible.builtin.apt:
        update_cache: yes
        upgrade: yes
        cache_valid_time: 3600
    
    # Install Ubuntu specific package for TZ change 
    # https://docs.ansible.com/ansible/latest/collections/community/general/timezone_module.html
    - name: "Install util-linux-extras to access hwclock"
      apt:
        name: util-linux-extra
        state: present
      when: ansible_distribution == "Ubuntu"

    # TimeZone configuration
    - name: "Set TimeZone using the community.general timezone module"
      become: true
      community.general.timezone:
        name: "{{ TIMEZONE }}"

    - name: Install chrony for time synchronization
      apt:
        name: chrony
        state: present

    - name: Enable and start chrony service
      service:
        name: chrony
        state: started
        enabled: yes

    # Install apt-listbugs to avoid installing buggy packages
    - name: Install apt-listbugs
      ansible.builtin.apt:
        name: apt-listbugs
        state: present

    # Install apt-listchanges to review package changes during upgrades
    - name: Install apt-listchanges
      ansible.builtin.apt:
        name: apt-listchanges
        state: present

    # Root user SSH setup
    - name: Create SSH directory for the root user
      file:
        path: "/{{ ANSIBLE_USER }}/.ssh"
        state: directory
        mode: "0700"

    - name: Add SSH key to root user's authorized_keys
      authorized_key:
        user: "{{ ANSIBLE_USER }}"
        key: "{{ lookup('file', SSH_KEY_PATH) }}"
        state: present

    # New User and SSH setup
    - name: Generate password hash
      set_fact:
        hashed_password: "{{ NEW_USER_PASSWORD | password_hash('sha512') }}"

    - name: Add user
      user:
        name: "{{ NEW_USER_NAME }}"
        state: present
        groups: sudo
        append: true
        password: "{{ hashed_password }}"

    - name: Configure sudo privileges for new user
      copy:
        dest: /etc/sudoers.d/{{ NEW_USER_NAME }}
        content: "{{ NEW_USER_NAME }} ALL=(ALL) ALL"
        mode: "0440"
        validate: /usr/sbin/visudo -cf %s

    - name: Create .ssh directory
      file:
        path: "/home/{{ NEW_USER_NAME }}/.ssh"
        state: directory
        mode: "0700" # (rwx------)

    - name: Add SSH key to authorized_keys
      authorized_key:
        user: "{{ NEW_USER_NAME }}"
        key: "{{ lookup('file', SSH_KEY_PATH) }}"
        state: present

    # Configure SSH daemon for security
    - name: Configure secure SSH configuration
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      loop:
        - {
            regexp: "^#?PermitRootLogin",
            line: "PermitRootLogin prohibit-password",
          }
        - {
            regexp: "^#?PasswordAuthentication",
            line: "PasswordAuthentication no",
          }
        - {
            regexp: "^#?ChallengeResponseAuthentication",
            line: "ChallengeResponseAuthentication no",
          }
        - { regexp: "^#?UsePAM", line: "UsePAM no" }
        - {
            regexp: "^#?PubkeyAuthentication",
            line: "PubkeyAuthentication yes",
          }
      notify: restart ssh

    - name: Create custom SSH config
      copy:
        src: ./config/ssh/99-custom.conf
        dest: /etc/ssh/sshd_config.d/99-custom.conf
        mode: "0644"
      notify: restart ssh

    # Basic package installation
    - name: Install packages
      apt:
        name:
          - vim # Text editor
          - curl # HTTP client
          - htop # Process viewer
          - git # Version control
          - mtr # Network diagnostic tool
        state: present

    # Security setup
    - name: Install security packages
      apt:
        name:
          - fail2ban
          - ufw
        state: present

    - name: Create fail2ban jail.local file
      copy:
        dest: /etc/fail2ban/jail.local
        src: ./config/fail2ban/jail.local

    - name: Enable fail2ban service
      service:
        name: fail2ban
        state: started
        enabled: yes

    - name: Allow OpenSSH through UFW
      ufw:
        rule: allow
        name: OpenSSH
        state: enabled

    - name: Enable UFW
      ufw:
        state: enabled
        policy: deny

    # Automatic updates configuration
    - name: Install unattended-upgrades
      apt:
        name: unattended-upgrades
        state: present

    - name: Enable unattended-upgrades
      debconf:
        name: unattended-upgrades
        question: unattended-upgrades/enable_auto_updates
        value: "true"
        vtype: boolean

    # Configure unattended-upgrades behavior
    - name: Configure unattended-upgrades
      blockinfile:
        path: /etc/apt/apt.conf.d/50unattended-upgrades
        create: yes
        block: |
          Unattended-Upgrade::Allowed-Origins {
              "${distro_id}:${distro_codename}";
              "${distro_id}:${distro_codename}-security";
              "${distro_id}ESMApps:${distro_codename}-apps-security";
              "${distro_id}ESM:${distro_codename}-infra-security";
          };
          Unattended-Upgrade::AutoFixInterruptedDpkg "true";  # Fix interrupted upgrades
          Unattended-Upgrade::MinimalSteps "true";            # Use minimal steps
          Unattended-Upgrade::InstallOnShutdown "false";      # Don't install on shutdown
          Unattended-Upgrade::Remove-Unused-Dependencies "true";  # Clean up
          Unattended-Upgrade::Automatic-Reboot "false";       # Don't reboot automatically

    # Configure automatic update schedule
    - name: Configure automatic updates
      copy:
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        src: ./config/apt/20auto-upgrades

    - name: Start and enable unattended-upgrades service
      service:
        name: unattended-upgrades
        state: started
        enabled: yes

    # Install Lynis for security auditing
    - name: Install latest Lynis from GitHub
      ansible.builtin.git:
        repo: 'https://github.com/CISOfy/lynis.git'
        dest: /opt/lynis
        version: master
      tags: lynis

    - name: Symlink lynis to /usr/local/bin
      ansible.builtin.file:
        src: /opt/lynis/lynis
        dest: /usr/local/bin/lynis
        state: link
        force: yes
      tags: lynis

  handlers:
    - name: restart ssh
      service:
        name: ssh
        state: restarted

  vars:
    SSH_KEY_PATH: "{{ lookup('env', 'SSH_KEY_PATH') }}"
    NEW_USER_PASSWORD: "{{ lookup('env', 'NEW_USER_PASSWORD') }}"
    NEW_USER_NAME: "{{ lookup('env', 'NEW_USER_NAME') }}"
    ANSIBLE_USER: "{{ lookup('env', 'ANSIBLE_USER') }}"
    TIMEZONE: "{{ lookup('env', 'TIMEZONE') }}"
